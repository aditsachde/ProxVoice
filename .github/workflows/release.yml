name: Release

on: 
  push:
    tags:
      - 'v*'

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ProxVoice ${{ github.ref }}
          body: |
            ProxVoice ${{ github.ref }}
          draft: false
          prerelease: false
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}

  mod:
    runs-on: ubuntu-latest
    needs: release
    defaults:
      run:
        working-directory: mod

    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - name: Cache Gradle packages
        uses: actions/cache@v2
        with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle
      - name: Build Jar
        run: ./gradlew jar
      - name: Get Jar name
        id: name
        run: |
          echo "::set-output name=jar::$(ls build/libs)"
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.release.outputs.upload_url }} 
          asset_path: mod/build/libs/${{ steps.name.outputs.jar }}
          asset_name: ${{ steps.name.outputs.jar }}
          asset_content_type: application/java-archive

  client:
    runs-on: ubuntu-latest
    needs: release
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest
          
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: nightly
          override: true
      - uses: actions-rs/cargo@v1
        with:
          command: build
          args: --manifest-path client/Cargo.toml --release
        env:
          CLIENT_ID: ${{ secrets.CLIENT_ID }}
          REQUEST_SECRET: ${{ secrets.REQUEST_SECRET }}
      - name: Upload Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: client-${{ runner.os }}
          path: |
            client/target/release/proxvoice
            client/target/release/proxvoice.exe
      - name: Get Binary name
        id: name
        run: |
          echo "::set-output name=binary::$(ls client/target/release)"
      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.release.outputs.upload_url }} 
          asset_path: client/target/release/${{ steps.name.outputs.binary }}
          asset_name: ${{ github.ref }}-${{ steps.name.outputs.binary }}
          asset_content_type: application/octet-stream